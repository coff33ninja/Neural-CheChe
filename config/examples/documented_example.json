{
  "_created_by": "ConfigManager.create_example_config",
  "_description": "Neural CheChe Configuration File",
  "_documentation": {
    "core": "Core training parameters that control the learning process",
    "error_handling": "Error handling and recovery settings for system stability",
    "gui": "Graphical interface settings for visualization",
    "history": "Move logging and backup settings for data persistence",
    "progress": "Progress tracking and display settings for monitoring training",
    "validation": "Move validation and anti-cheating settings to ensure fair gameplay"
  },
  "_version": "1.0",
  "core": {
    "_description": "Core training configuration - controls the fundamental learning parameters",
    "_field_docs": {
      "batch_size": "Number of experiences to sample for each training step",
      "buffer_capacity": "Maximum number of experiences to store in replay buffer",
      "challenger_interval": "How often to introduce challenger agents",
      "challenger_threshold": "Win rate threshold for challenger promotion",
      "device": "Computing device to use (auto, cpu, cuda)",
      "games_per_generation": "Number of games to play per generation",
      "learning_rate": "Learning rate for neural network training (0.0001-0.1)",
      "max_moves_per_game": "Maximum number of moves before declaring a draw",
      "model_architecture": "Neural network architecture to use",
      "move_delay": "Delay between moves in seconds (for visualization)",
      "random_seed": "Random seed for reproducible results (null for random)",
      "save_interval": "How often to save model checkpoints (in generations)",
      "training_steps_per_generation": "Number of training steps to perform per generation",
      "wildcard_interval": "How often to introduce wildcard agents"
    },
    "batch_size": 64,
    "buffer_capacity": 100000,
    "challenger_interval": 5,
    "challenger_threshold": 0.55,
    "device": "auto",
    "games_per_generation": 6,
    "learning_rate": 0.001,
    "max_moves_per_game": 200,
    "model_architecture": "default",
    "move_delay": 0.1,
    "random_seed": null,
    "save_interval": 10,
    "training_steps_per_generation": 50,
    "wildcard_interval": 3
  },
  "error_handling": {
    "_description": "Error handling configuration - manages system stability and recovery",
    "_field_docs": {
      "auto_recovery_enabled": "Attempt automatic recovery from common errors",
      "continue_on_component_failure": "Continue training even if non-critical components fail",
      "crash_dump_enabled": "Create crash dumps for severe errors",
      "detailed_error_logging": "Include stack traces and detailed context in error logs",
      "error_log_path": "Path to the error log file",
      "error_reporting_enabled": "Enable anonymous error reporting for debugging",
      "exponential_backoff": "Use exponential backoff for retry delays",
      "fallback_mode_enabled": "Enable fallback modes when primary systems fail",
      "graceful_degradation": "Continue operation with reduced functionality when components fail",
      "log_errors": "Log all errors to file for debugging",
      "max_retry_attempts": "Maximum number of retry attempts for failed operations",
      "memory_cleanup_on_error": "Clean up memory when errors occur",
      "notify_user_on_error": "Show error notifications to the user",
      "retry_delay": "Initial delay (seconds) between retry attempts",
      "retry_failed_operations": "Automatically retry failed operations"
    },
    "auto_recovery_enabled": true,
    "continue_on_component_failure": true,
    "crash_dump_enabled": true,
    "detailed_error_logging": true,
    "error_log_path": "logs/errors.log",
    "error_reporting_enabled": false,
    "exponential_backoff": true,
    "fallback_mode_enabled": true,
    "graceful_degradation": true,
    "log_errors": true,
    "max_retry_attempts": 3,
    "memory_cleanup_on_error": true,
    "notify_user_on_error": true,
    "retry_delay": 1.0,
    "retry_failed_operations": true
  },
  "gui": {
    "_description": "GUI and visualization configuration - controls the graphical interface",
    "_field_docs": {
      "adaptive_layout": "Automatically adapt layout to window size changes",
      "animation_speed": "Speed multiplier for animations",
      "auto_resize_elements": "Automatically resize UI elements with window",
      "board_size": "Size of the game board in pixels",
      "default_window_size": "Default window size when application starts [width, height]",
      "enable_sound": "Enable sound effects",
      "enable_visualization": "Enable the graphical user interface",
      "font_size": "Font size for UI text",
      "fps_limit": "Maximum frames per second",
      "fullscreen_mode": "Start in fullscreen mode",
      "highlight_last_move": "Highlight the last move made",
      "maximum_window_size": "Maximum allowed window size [width, height]",
      "minimum_window_size": "Minimum allowed window size [width, height]",
      "piece_size": "Size of game pieces in pixels",
      "progress_bar_style": "Visual style for progress bars",
      "show_captured_pieces": "Display captured pieces for each player",
      "show_coordinates": "Show board coordinates (A-H, 1-8)",
      "show_move_hints": "Show visual hints for possible moves",
      "theme": "Visual theme (default, dark, light, high_contrast, colorblind)",
      "vsync_enabled": "Enable vertical sync for smooth rendering"
    },
    "adaptive_layout": true,
    "animation_speed": 1.0,
    "auto_resize_elements": true,
    "board_size": 400,
    "default_window_size": [
      1200,
      800
    ],
    "enable_sound": false,
    "enable_visualization": true,
    "font_size": 12,
    "fps_limit": 60,
    "fullscreen_mode": false,
    "highlight_last_move": true,
    "maximum_window_size": [
      1920,
      1080
    ],
    "minimum_window_size": [
      800,
      600
    ],
    "piece_size": 40,
    "progress_bar_style": "modern",
    "show_captured_pieces": true,
    "show_coordinates": true,
    "show_move_hints": true,
    "theme": "default",
    "vsync_enabled": true
  },
  "history": {
    "_description": "History and backup configuration - manages data persistence and logging",
    "_field_docs": {
      "auto_cleanup_enabled": "Automatically clean up old backup files",
      "backup_compression_level": "Compression level (1-9) when compression is enabled",
      "backup_directory": "Directory where move history and backups are stored",
      "backup_format": "Format for backup files (json, msgpack, pickle)",
      "backup_frequency": "When to create backups (per_move, per_game, per_generation, manual)",
      "compress_backups": "Compress backup files to save disk space",
      "detailed_logging": "Include detailed information in move logs",
      "enable_incremental_backups": "Create incremental backups to save space",
      "enable_move_logging": "Enable comprehensive move logging to JSON files",
      "log_board_states": "Log complete board states before and after moves",
      "log_evaluation_scores": "Log position evaluation scores",
      "log_policy_distributions": "Log AI policy distributions for move analysis",
      "max_log_file_size": "Maximum size (MB) for individual log files before rotation",
      "retention_days": "Number of days to keep backup files before cleanup"
    },
    "auto_cleanup_enabled": true,
    "backup_compression_level": 6,
    "backup_directory": "move_history/",
    "backup_format": "json",
    "backup_frequency": "per_game",
    "compress_backups": false,
    "detailed_logging": true,
    "enable_incremental_backups": true,
    "enable_move_logging": true,
    "log_board_states": true,
    "log_evaluation_scores": true,
    "log_policy_distributions": true,
    "max_log_file_size": 100,
    "retention_days": 30
  },
  "progress": {
    "_description": "Progress tracking configuration - controls how training progress is displayed",
    "_field_docs": {
      "cli_progress_width": "Width of CLI progress bars in characters",
      "display_growth_charts": "Show generational growth charts in GUI",
      "enable_cli_progress": "Enable command-line progress bars using tqdm",
      "enable_gui_progress": "Enable graphical progress indicators in GUI mode",
      "enable_performance_metrics": "Track and display performance metrics",
      "gui_progress_height": "Height of GUI progress bars in pixels",
      "metrics_history_length": "Number of historical metric points to keep",
      "progress_bar_style": "Visual style for progress bars (modern, classic, minimal, detailed)",
      "refresh_rate": "Maximum refresh rate (Hz) for progress displays",
      "show_detailed_metrics": "Show detailed training metrics in progress displays",
      "show_eta": "Show estimated time of arrival in progress displays",
      "show_rate": "Show processing rate in progress displays",
      "update_frequency": "How often (seconds) to update progress displays"
    },
    "cli_progress_width": 80,
    "display_growth_charts": true,
    "enable_cli_progress": true,
    "enable_gui_progress": true,
    "enable_performance_metrics": true,
    "gui_progress_height": 20,
    "metrics_history_length": 100,
    "progress_bar_style": "modern",
    "refresh_rate": 10.0,
    "show_detailed_metrics": true,
    "show_eta": true,
    "show_rate": true,
    "update_frequency": 0.1
  },
  "validation": {
    "_description": "Move validation configuration - prevents AI cheating and ensures fair play",
    "_field_docs": {
      "auto_fix_minor_violations": "Automatically fix minor violations when possible",
      "detailed_violation_logging": "Include detailed information in violation logs",
      "enable_board_state_validation": "Validate board state consistency before and after moves",
      "enable_magical_piece_detection": "Detect and prevent AI from creating magical pieces",
      "enable_move_validation": "Enable/disable the entire move validation system",
      "log_violations": "Log validation violations to file for analysis",
      "max_retries": "Maximum number of retries when a move validation fails",
      "strict_piece_checking": "Enable strict checking for piece integrity and magical piece detection",
      "validation_timeout": "Maximum time (seconds) to spend on move validation",
      "violation_log_path": "Path to the JSON file where violations are logged"
    },
    "auto_fix_minor_violations": false,
    "detailed_violation_logging": true,
    "enable_board_state_validation": true,
    "enable_magical_piece_detection": true,
    "enable_move_validation": true,
    "log_violations": true,
    "max_retries": 3,
    "strict_piece_checking": true,
    "validation_timeout": 5.0,
    "violation_log_path": "logs/violations.json"
  }
}